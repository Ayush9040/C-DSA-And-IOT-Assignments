1. Define a function to input variable length string and store it in an array without
memory wastage.

Ans. #include<stdio.h>

    int main()
    {
        char *s;
        s= (char*)malloc(sizeof(char));
        printf("Enter String\n");
        char a;
        int k=0, l=1;
        while(a != '\n')
        {
            a = getc(stdin);
            l++;
            s=(char*)realloc(s, l * sizeof(char));
            s[k]=a;
            k++;
        }
        s[k]='\0';
        printf("\nString is : %s",s);
        free(s);
        return 0;
    }


2. Write a program to ask the user to input a number of data values he would like to
enter then create an array dynamically to accommodate the data values. Now take
the input from the user and display the average of data values.

Ans. #include<stdio.h>


    int main()
    {
        int n=0;
        float sum=0;
        printf("Enter the number of data values: \n");
        scanf("%d",&n);
        int *a;
        a = (int*)calloc(n,sizeof(int));
        printf("\nEnter The data values: \n");
        int i;
        for(i=0; i<n; i++)
        {
            scanf("%d", (a+i));
        }
        printf("\n############################\n");
        for(i=0; i<n; i++)
        {
            sum = sum + *(a+i);
        }
        float avg;
        avg = sum/n;
        printf("Average is : %f",avg);
        free(a);
        return 0;
    }


3. Write a program to calculate the sum of n numbers entered by the user using malloc
and free.

Ans. #include<stdio.h>

    int main()
    {
        int n, *a;
        printf("Enter how much data values you want to enter : \n");
        scanf("%d",&n);
        a = (int*)malloc(n * sizeof(int));
        int i,sum=0;
        printf("\nEnter data values : \n");
        for(i=0; i<n; i++)
        {
            scanf("%d",a+i);
        }
        printf("\n#########################\n");
        for(i=0;i<n;i++)
        {
            sum = sum + *(a+i);
        }
        printf("\nSum is : %d",sum);
        free(a);

        return 0;
    }



4. Write a program to input and print text using dynamic memory allocation.

Ans. #include<stdio.h>

    int main()
    {
        char *s;
        s= (char*)malloc(sizeof(char));
        printf("Enter String\n");
        char a;
        int k=0, l=1;
        while(a != '\n')
        {
            a = getc(stdin);
            l++;
            s=(char*)realloc(s, l * sizeof(char));
            s[k]=a;
            k++;
        }
        s[k]='\0';
        printf("\nString is : %s",s);
        free(s);
        return 0;
    }


5. Write a program to read a one dimensional array, print sum of all elements along with
inputted array elements using dynamic memory allocation.

Ans. #include<stdio.h>

    int main()
    {
        int *a=NULL;
        int n,sum=0;
        scanf("%d",&n);
        a= (int*)calloc(n, sizeof(int));
        //a=NULL;
        if(a==NULL)
        {
            printf("\nMemory Allocation is failed\n");
            return 0;
        }
        int i;
        printf("\nEnter Values : \n");
        for(i=0; i<n; i++)
        {
            scanf("%d",a+i);
        }

        printf("\n#############################\n");

        for(i=0; i<n; i++)
        {
            printf("%d + ",*(a+i));
            sum = sum + *(a+i);
        }
        printf(" = %d",sum);


        return 0;
    }


6. Write a program in C to find the largest element using Dynamic Memory Allocation.

Ans. #include<stdio.h>

    int main()
    {
        int n, *a;
        printf("Enter how much data values you want to enter : \n");
        scanf("%d",&n);
        a = (int*)malloc(n * sizeof(int));
        int i;
        printf("\nEnter data values : \n");
        for(i=0; i<n; i++)
        {
            scanf("%d",a+i);
        }
        printf("\n#########################\n");
        int b = *a;

        for(i=0;i<n;i++)
        {
            if(b < *(a+i))
            {
                b = *(a+i);
            }
        }
        printf("\nLargest element is : %d",b);
        free(a);

        return 0;
    }


7. Write a program to demonstrate memory leak in C.

Ans. #include<stdio.h>

    int main()
    {
        int *a;
        a= (int*)malloc(sizeof(int));
        a=NULL;

        return 0;
    }


8. Write a program to demonstrate dangling pointers in C.

Ans. #include<stdio.h>

    int main()
    {
        int *a;
        a= (int*)malloc(sizeof(int));
        printf("%d\n",a);
        free(a);
        printf("\n%d\n",a);
        return 0;
    }


9. Write a program to allocate memory dynamically of the size in bytes entered by the
user. Also handle the case when memory allocation is failed.

Ans. #include<stdio.h>

    int main()
    {
        int *a=NULL;
        int n;
        scanf("%d",&n);
        a= (int*)malloc(n * sizeof(int));
        //a=NULL;
        if(a==NULL)
        {
            printf("\nMemory Allocation is failed\n");
            return 0;
        }
        int i;
        printf("\nEnter Values : \n");
        for(i=0; i<n; i++)
        {
            scanf("%d",a+i);
        }

        printf("\n#############################\n");

        for(i=0; i<n; i++)
        {
            printf("%d\n",*(a+i));
        }


        return 0;
    }


10. Find out the maximum and minimum from an array using dynamic memory allocation
in C.

Ans. #include<stdio.h>

    int main()
    {
        int n, *a;
        printf("Enter how much data values you want to enter : \n");
        scanf("%d",&n);
        a = (int*)malloc(n * sizeof(int));
        int i;
        printf("\nEnter data values : \n");
        for(i=0; i<n; i++)
        {
            scanf("%d",a+i);
        }
        printf("\n#########################\n");
        int b = *a;
        int c = *a;

        for(i=0;i<n;i++)
        {
            if(b < *(a+i))
            {
                b = *(a+i);
            }
            if(c > *(a+i))
            {
                c = *(a+i);
            }
        }
        printf("\nLargest element is : %d",b);
        printf("\nSmallest element is : %d",c);
        free(a);

        return 0;
    }